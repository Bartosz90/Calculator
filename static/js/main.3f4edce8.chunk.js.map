{"version":3,"sources":["components/Calculator.js","serviceWorker.js","index.js"],"names":["Calculator","state","screen","btns","id","content","number","handleCalc","setState","length","score","eval","toString","backspace","substring","this","map","btn","key","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+vCAGMA,W,4sBACJC,MAAQ,CACNC,OAAQ,I,MAEVC,KAAO,CACL,CAAEC,GAAI,EAAGC,QAAS,KAAMC,QAAQ,GAChC,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,KAAMC,QAAQ,GAChC,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,EAAGC,QAAS,IAAKC,QAAQ,GAC/B,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,GAChC,CAAEF,GAAI,GAAIC,QAAS,IAAKC,QAAQ,I,MAGlCC,WAAa,SAACD,OAAQD,SAIpB,GAHIC,QACF,MAAKE,SAAS,CAAEN,OAAQ,MAAKD,MAAMC,OAASG,UAGhC,MAAZA,SACY,MAAZA,SACY,MAAZA,SACY,MAAZA,QACA,CACA,GAAiC,IAA7B,MAAKJ,MAAMC,OAAOO,OACpB,OAEA,MAAKD,SAAS,CAAEN,OAAQ,MAAKD,MAAMC,OAASG,UAGhD,GAAgB,MAAZA,QAAiB,CACnB,IAAMK,MAAQC,KAAK,MAAKV,MAAMC,QAAQU,WACtC,MAAKJ,SAAS,CACZN,OAAQQ,QAMZ,GAHgB,MAAZL,SACF,MAAKG,SAAS,CAAEN,OAAQ,KAEV,OAAZG,SAAgC,OAAZA,QAAkB,CACxC,IAAMQ,UAAY,MAAKZ,MAAMC,OAAOY,UAClC,EACA,MAAKb,MAAMC,OAAOO,OAAS,GAE7B,MAAKD,SAAS,CAAEN,OAAQW,c,wVAGlB,IAAD,OACDV,EAAOY,KAAKZ,KAAKa,IAAI,SAAAC,GACzB,OACE,qEACEC,IAAKD,EAAIb,GACTe,UAAU,MACVC,QAAS,kBAAM,EAAKb,WAAWU,EAAIX,OAAQW,EAAIZ,WAE9CY,EAAIZ,WAKX,OACE,kEAAKc,UAAU,QACb,kEAAKA,UAAU,UACb,qEAAKJ,KAAKd,MAAMC,SAEjBC,O,YA9EgBkB,8CAoFVrB,kC,qKC3EKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAA,EAAD,MAAgB6B,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f4edce8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/calculator.sass\";\r\n\r\nclass Calculator extends Component {\r\n  state = {\r\n    screen: \"\"\r\n  };\r\n  btns = [\r\n    { id: 1, content: \"ce\", number: false },\r\n    { id: 2, content: \"c\", number: false },\r\n    { id: 3, content: \"<-\", number: false },\r\n    { id: 4, content: \"/\", number: false },\r\n    { id: 5, content: \"7\", number: true },\r\n    { id: 6, content: \"8\", number: true },\r\n    { id: 7, content: \"9\", number: true },\r\n    { id: 8, content: \"*\", number: false },\r\n    { id: 9, content: \"4\", number: true },\r\n    { id: 10, content: \"5\", number: true },\r\n    { id: 11, content: \"6\", number: true },\r\n    { id: 12, content: \"-\", number: false },\r\n    { id: 13, content: \"1\", number: true },\r\n    { id: 14, content: \"2\", number: true },\r\n    { id: 15, content: \"3\", number: true },\r\n    { id: 16, content: \"+\", number: false },\r\n    { id: 17, content: \"e\", number: false },\r\n    { id: 18, content: \"0\", number: true },\r\n    { id: 19, content: \".\", number: true },\r\n    { id: 20, content: \"=\", number: false }\r\n  ];\r\n\r\n  handleCalc = (number, content) => {\r\n    if (number) {\r\n      this.setState({ screen: this.state.screen + content });\r\n    }\r\n    if (\r\n      content === \"-\" ||\r\n      content === \"+\" ||\r\n      content === \"/\" ||\r\n      content === \"*\"\r\n    ) {\r\n      if (this.state.screen.length === 0) {\r\n        return;\r\n      } else {\r\n        this.setState({ screen: this.state.screen + content });\r\n      }\r\n    }\r\n    if (content === \"=\") {\r\n      const score = eval(this.state.screen).toString();\r\n      this.setState({\r\n        screen: score\r\n      });\r\n    }\r\n    if (content === \"c\") {\r\n      this.setState({ screen: \"\" });\r\n    }\r\n    if (content === \"ce\" || content === \"<-\") {\r\n      const backspace = this.state.screen.substring(\r\n        0,\r\n        this.state.screen.length - 1\r\n      );\r\n      this.setState({ screen: backspace });\r\n    }\r\n  };\r\n  render() {\r\n    const btns = this.btns.map(btn => {\r\n      return (\r\n        <button\r\n          key={btn.id}\r\n          className=\"btn\"\r\n          onClick={() => this.handleCalc(btn.number, btn.content)}\r\n        >\r\n          {btn.content}\r\n        </button>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"calc\">\r\n        <div className=\"screen\">\r\n          <h1>{this.state.screen}</h1>\r\n        </div>\r\n        {btns}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport Calculator from \"./components/Calculator\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}